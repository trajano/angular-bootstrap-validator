!function(){"use strict";angular.module("angular.bootstrap.validator").directive("abvError",function(t,e){return{restrict:"A",scope:{validatorName:"@abvError",oldControlName:"@abvModel",controlName:"@abvFor"},require:"^form",terminal:!0,link:function(n,r,a,i){var o;n.oldControlName&&(e.warn("abv-model is deprecated use abv-for"),n.controlName=n.oldControlName),o=n.controlName?n.controlName:r.siblings(".form-control")[0]?r.siblings(".form-control")[0].name:r.parent().find('input[type="checkbox"]')[0].name;var c="$parent."+i.$name,l=c+".$submitted && "+c+"."+o+".$error."+n.validatorName;n.$watch(l,function(e){t[e?"removeClass":"addClass"](r,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}).directive("abvIdentical",function(){return{restrict:"A",scope:{targetModel:"=abvIdentical"},require:"ngModel",link:function(t,e,n,r){r.$validators.abvIdentical=function(e){return e===t.targetModel},t.$watch("targetModel",function(){r.$validate()})}}}).directive("abvDifferent",function(){return{restrict:"A",scope:{targetModel:"=abvDifferent"},require:"ngModel",link:function(t,e,n,r){r.$validators.abvDifferent=function(e){return e!==t.targetModel},t.$watch("targetModel",function(){r.$validate()})}}}).directive("abvForm",function(t){function e(t){var e=$(t),n=e.attr("name");return n||(n=e.attr("id"),e.attr("name",n)),e.attr("ng-model")||e.data("ng-model")||e.attr("ng-model",n),n}function n(t,e){return"{'has-success': "+t+".$submitted && "+t+"."+e+".$valid, 'has-error': "+t+".$submitted && "+t+"."+e+".$invalid }"}return{require:"form",restrict:"A",terminal:!0,compile:function(){return function(r,a,i,o){r.resetForm=function(){o.$commitViewValue(),o.$setPristine()};var c=o.$name;a.find('button[type="submit"]').attr("ng-disabled",c+".$submitted && "+c+".$invalid"),a.find('button[type="reset"]').attr("ng-click","resetForm()"),a.attr("novalidate","novalidate"),a.find(".form-group").each(function(t,r){var a=$(r).find(".form-control");a.forEach(function(t){var a=e(t);$(r).hasClass("has-feedback")&&t.after('<span class="glyphicon form-control-feedback" ng-class="{\'glyphicon-ok\' : '+c+"."+a+".$valid, 'glyphicon-remove' : "+c+"."+a+'.$invalid }" ng-if="'+c+'.$submitted" aria-hidden="true"></span>'),$(r).attr("ng-class",n(c,a))})}),a.find(".checkbox").each(function(t,r){var a=$(r).find('input[type="checkbox"]');if(1===a.length){var i=e(a[0]);$(r).wrap('<div ng-class="'+n(c,i)+'"></div>')}}),t(a.contents())(r)}}}})}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvYW5ndWxhci1ib290c3RyYXAtdmFsaWRhdG9yLWQuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImRpcmVjdGl2ZSIsIiRhbmltYXRlIiwiJGxvZyIsInJlc3RyaWN0Iiwic2NvcGUiLCJ2YWxpZGF0b3JOYW1lIiwib2xkQ29udHJvbE5hbWUiLCJjb250cm9sTmFtZSIsInJlcXVpcmUiLCJ0ZXJtaW5hbCIsImxpbmsiLCJlbGVtZW50IiwiYXR0cnMiLCJmb3JtIiwid2FybiIsInNpYmxpbmdzIiwibmFtZSIsInBhcmVudCIsImZpbmQiLCJmb3JtTmFtZSIsIiRuYW1lIiwid2F0Y2hFeHByIiwiJHdhdGNoIiwidmFsdWUiLCJ0ZW1wQ2xhc3NlcyIsInRhcmdldE1vZGVsIiwiYXR0cmlidXRlcyIsIm5nTW9kZWwiLCIkdmFsaWRhdG9ycyIsImFidklkZW50aWNhbCIsIm1vZGVsVmFsdWUiLCIkdmFsaWRhdGUiLCJhYnZEaWZmZXJlbnQiLCIkY29tcGlsZSIsImFkZE5hbWVOZ01vZGVsVG9Db250cm9sQW5kR2V0Q29udHJvbE5hbWUiLCJjb250cm9sRWxlbWVudCIsImNvbnRyb2wiLCIkIiwiYXR0ciIsImRhdGEiLCJuZ0NsYXNzQXR0cmlidXRlIiwiY29tcGlsZSIsImNvbnRyb2xsZXIiLCJyZXNldEZvcm0iLCIkY29tbWl0Vmlld1ZhbHVlIiwiJHNldFByaXN0aW5lIiwiZWFjaCIsImluZGV4IiwiZm9ybUdyb3VwIiwiY29udHJvbHMiLCJmb3JFYWNoIiwiaGFzQ2xhc3MiLCJhZnRlciIsImNoZWNrYm94IiwibGVuZ3RoIiwid3JhcCIsImNvbnRlbnRzIl0sIm1hcHBpbmdzIjoiQ0FBRSxXQUNGLFlBR0FBLFNBQVFDLE9BRmlCLCtCQUFBQyxVQUFBLFdBQUEsU0FBQUMsRUFBQUMsR0FDckIsT0FDQUMsU0FBTyxJQUNMQyxPQUNBQyxjQUFBLFlBQ0FDLGVBQWEsWUFIZkMsWUFBQSxXQU1BQyxRQUFBLFFBQ0FDLFVBQU0sRUFD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QUFvRGUsRUFBVSxHQUhoRVosR0FBQWdCLEdBQUFFLEtBQUEsa0JBQUFmLEVBQUFyQixFQUFBWixHQUFBLGVBeENXMEIsRUFBQXRCLEVBQUE2QyxZQUFBcEQiLCJmaWxlIjoiZGlyZWN0aXZlcy9hbmd1bGFyLWJvb3RzdHJhcC12YWxpZGF0b3ItZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgJCAqL1xyXG5hbmd1bGFyLm1vZHVsZSgnYW5ndWxhci5ib290c3RyYXAudmFsaWRhdG9yJylcclxuICAuZGlyZWN0aXZlKCdhYnZFcnJvcicsICgkYW5pbWF0ZSwgJGxvZykgPT4gKHtcclxuICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICBzY29wZToge1xyXG4gICAgICB2YWxpZGF0b3JOYW1lOiAnQGFidkVycm9yJyxcclxuICAgICAgb2xkQ29udHJvbE5hbWU6ICdAYWJ2TW9kZWwnLFxyXG4gICAgICBjb250cm9sTmFtZTogJ0BhYnZGb3InXHJcbiAgICB9LFxyXG4gICAgcmVxdWlyZTogJ15mb3JtJyxcclxuICAgIHRlcm1pbmFsOiB0cnVlLFxyXG4gICAgbGluazogKHNjb3BlLCBlbGVtZW50LCBhdHRycywgZm9ybSkgPT4ge1xyXG4gICAgICB2YXIgY29udHJvbE5hbWVcclxuICAgICAgaWYgKHNjb3BlLm9sZENvbnRyb2xOYW1lKSB7XHJcbiAgICAgICAgJGxvZy53YXJuKCdhYnYtbW9kZWwgaXMgZGVwcmVjYXRlZCB1c2UgYWJ2LWZvcicpXHJcbiAgICAgICAgc2NvcGUuY29udHJvbE5hbWUgPSBzY29wZS5vbGRDb250cm9sTmFtZVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChzY29wZS5jb250cm9sTmFtZSkge1xyXG4gICAgICAgIGNvbnRyb2xOYW1lID0gc2NvcGUuY29udHJvbE5hbWVcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoZWxlbWVudC5zaWJsaW5ncygnLmZvcm0tY29udHJvbCcpWzBdKSB7XHJcbiAgICAgICAgICBjb250cm9sTmFtZSA9IGVsZW1lbnQuc2libGluZ3MoJy5mb3JtLWNvbnRyb2wnKVswXS5uYW1lXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnRyb2xOYW1lID0gZWxlbWVudC5wYXJlbnQoKS5maW5kKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKVswXS5uYW1lXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHZhciBmb3JtTmFtZSA9IGAkcGFyZW50LiR7Zm9ybS4kbmFtZX1gXHJcbiAgICAgIHZhciB3YXRjaEV4cHIgPSBgJHtmb3JtTmFtZX0uJHN1Ym1pdHRlZCAmJiAke2Zvcm1OYW1lfS4ke2NvbnRyb2xOYW1lfS4kZXJyb3IuJHtzY29wZS52YWxpZGF0b3JOYW1lfWBcclxuICAgICAgc2NvcGUuJHdhdGNoKHdhdGNoRXhwciwgdmFsdWUgPT4ge1xyXG4gICAgICAgICRhbmltYXRlW3ZhbHVlID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKGVsZW1lbnQsICduZy1oaWRlJywge1xyXG4gICAgICAgICAgdGVtcENsYXNzZXM6ICduZy1oaWRlLWFuaW1hdGUnXHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9KSlcclxuICAuZGlyZWN0aXZlKCdhYnZJZGVudGljYWwnLCAoKSA9PiAoe1xyXG4gICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgIHNjb3BlOiB7XHJcbiAgICAgIHRhcmdldE1vZGVsOiAnPWFidklkZW50aWNhbCdcclxuICAgIH0sXHJcbiAgICByZXF1aXJlOiAnbmdNb2RlbCcsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcywgbmdNb2RlbCkge1xyXG5cclxuICAgICAgbmdNb2RlbC4kdmFsaWRhdG9ycy5hYnZJZGVudGljYWwgPSBtb2RlbFZhbHVlID0+IG1vZGVsVmFsdWUgPT09IHNjb3BlLnRhcmdldE1vZGVsXHJcblxyXG4gICAgICBzY29wZS4kd2F0Y2goJ3RhcmdldE1vZGVsJywgKCkgPT4ge1xyXG4gICAgICAgIG5nTW9kZWwuJHZhbGlkYXRlKClcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9KSlcclxuICAuZGlyZWN0aXZlKCdhYnZEaWZmZXJlbnQnLCAoKSA9PiAoe1xyXG4gICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgIHNjb3BlOiB7XHJcbiAgICAgIHRhcmdldE1vZGVsOiAnPWFidkRpZmZlcmVudCdcclxuICAgIH0sXHJcbiAgICByZXF1aXJlOiAnbmdNb2RlbCcsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcywgbmdNb2RlbCkge1xyXG5cclxuICAgICAgbmdNb2RlbC4kdmFsaWRhdG9ycy5hYnZEaWZmZXJlbnQgPSBtb2RlbFZhbHVlID0+IG1vZGVsVmFsdWUgIT09IHNjb3BlLnRhcmdldE1vZGVsXHJcblxyXG4gICAgICBzY29wZS4kd2F0Y2goJ3RhcmdldE1vZGVsJywgKCkgPT4ge1xyXG4gICAgICAgIG5nTW9kZWwuJHZhbGlkYXRlKClcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9KSlcclxuICAuZGlyZWN0aXZlKCdhYnZGb3JtJywgJGNvbXBpbGUgPT4ge1xyXG4gICAgZnVuY3Rpb24gYWRkTmFtZU5nTW9kZWxUb0NvbnRyb2xBbmRHZXRDb250cm9sTmFtZShjb250cm9sRWxlbWVudCkge1xyXG4gICAgICB2YXIgY29udHJvbCA9ICQoY29udHJvbEVsZW1lbnQpXHJcbiAgICAgIHZhciBjb250cm9sTmFtZSA9IGNvbnRyb2wuYXR0cignbmFtZScpXHJcbiAgICAgIGlmICghY29udHJvbE5hbWUpIHtcclxuICAgICAgICBjb250cm9sTmFtZSA9IGNvbnRyb2wuYXR0cignaWQnKVxyXG4gICAgICAgIGNvbnRyb2wuYXR0cignbmFtZScsIGNvbnRyb2xOYW1lKVxyXG4gICAgICB9XHJcbiAgICAgIGlmICghY29udHJvbC5hdHRyKCduZy1tb2RlbCcpICYmICFjb250cm9sLmRhdGEoJ25nLW1vZGVsJykpIHtcclxuICAgICAgICBjb250cm9sLmF0dHIoJ25nLW1vZGVsJywgY29udHJvbE5hbWUpXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGNvbnRyb2xOYW1lXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG5nQ2xhc3NBdHRyaWJ1dGUoZm9ybU5hbWUsIGNvbnRyb2xOYW1lKSB7XHJcbiAgICAgIHJldHVybiBgeydoYXMtc3VjY2Vzcyc6ICR7Zm9ybU5hbWV9LiRzdWJtaXR0ZWQgJiYgJHtmb3JtTmFtZX0uJHtjb250cm9sTmFtZX0uJHZhbGlkLCAnaGFzLWVycm9yJzogJHtmb3JtTmFtZX0uJHN1Ym1pdHRlZCAmJiAke2Zvcm1OYW1lfS4ke2NvbnRyb2xOYW1lfS4kaW52YWxpZCB9YFxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlcXVpcmU6ICdmb3JtJyxcclxuICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgdGVybWluYWw6IHRydWUsXHJcbiAgICAgIGNvbXBpbGU6ICgpID0+IChzY29wZSwgZWxlbWVudCwgYXR0ciwgY29udHJvbGxlcikgPT4ge1xyXG4gICAgICAgIC8vIHJlc2V0IGZvcm0gZnVuY3Rpb25cclxuICAgICAgICBzY29wZS5yZXNldEZvcm0gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGNvbnRyb2xsZXIuJGNvbW1pdFZpZXdWYWx1ZSgpXHJcbiAgICAgICAgICBjb250cm9sbGVyLiRzZXRQcmlzdGluZSgpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZm9ybU5hbWUgPSBjb250cm9sbGVyLiRuYW1lXHJcblxyXG4gICAgICAgIC8vIGRpc2FibGUgc3VibWl0IGJ1dHRvbnMgd2hlbiB0aGUgZm9ybSBpcyBpbnZhbGlkIGFmdGVyIHN1Ym1pdFxyXG4gICAgICAgIGVsZW1lbnQuZmluZCgnYnV0dG9uW3R5cGU9XCJzdWJtaXRcIl0nKS5hdHRyKCduZy1kaXNhYmxlZCcsIGAke2Zvcm1OYW1lfS4kc3VibWl0dGVkICYmICR7Zm9ybU5hbWV9LiRpbnZhbGlkYClcclxuXHJcbiAgICAgICAgLy8gYXNzb2NpYXRlIHRoZSByZXNldCBidXR0b24gd2l0aCB0aGUgcmVzZXQgZm9ybSBmdW5jdGlvblxyXG4gICAgICAgIGVsZW1lbnQuZmluZCgnYnV0dG9uW3R5cGU9XCJyZXNldFwiXScpLmF0dHIoJ25nLWNsaWNrJywgJ3Jlc2V0Rm9ybSgpJylcclxuXHJcbiAgICAgICAgLy8gZGlzYWJsZSBuYXRpdmUgZm9ybSB2YWxpZGF0aW9uIGJlY2F1c2UgdGhlIHZhbGlkYXRpb24gaXMgaGFuZGxlZCBieSBBbmd1bGFyXHJcbiAgICAgICAgZWxlbWVudC5hdHRyKCdub3ZhbGlkYXRlJywgJ25vdmFsaWRhdGUnKVxyXG5cclxuICAgICAgICAvLyBmb3IgZWFjaCBmb3JtLWNvbnRyb2wgaW4gYSBmb3JtIGdyb3VwXHJcbiAgICAgICAgZWxlbWVudC5maW5kKCcuZm9ybS1ncm91cCcpLmVhY2goKGluZGV4LCBmb3JtR3JvdXApID0+IHtcclxuICAgICAgICAgIHZhciBjb250cm9scyA9ICQoZm9ybUdyb3VwKS5maW5kKCcuZm9ybS1jb250cm9sJylcclxuICAgICAgICAgIC8vIE9ubHkgaW5wdXQgdGV4dCBhcmVhcyBzaG91bGQgaGF2ZSBmZWVkYmFjaywgdGV4dGFyZWEgbXVzdCBub3QgaGF2ZSBmZWVkYmFja1xyXG4gICAgICAgICAgLy8gb25seSBzdXBwb3J0IG9uZSBjb250cm9sIHBlciBmb3JtLWdyb3VwIGFzIHBlciBCb290c3RyYXAgQ1NTIGV4YW1wbGVzXHJcbiAgICAgICAgICBjb250cm9scy5mb3JFYWNoKGNvbnRyb2wgPT4ge1xyXG4gICAgICAgICAgICAvLyBzZXQgdGhlIG5hbWUuIGFuZCBuZy1tb2RlbCBhcHByb3ByaWF0ZWx5XHJcbiAgICAgICAgICAgIHZhciBjb250cm9sTmFtZSA9IGFkZE5hbWVOZ01vZGVsVG9Db250cm9sQW5kR2V0Q29udHJvbE5hbWUoY29udHJvbClcclxuXHJcbiAgICAgICAgICAgIC8vIGFkZCBmZWVkYmFjayBpY29uc1xyXG4gICAgICAgICAgICBpZiAoJChmb3JtR3JvdXApLmhhc0NsYXNzKCdoYXMtZmVlZGJhY2snKSkge1xyXG4gICAgICAgICAgICAgIGNvbnRyb2wuYWZ0ZXIoYDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGZvcm0tY29udHJvbC1mZWVkYmFja1wiIG5nLWNsYXNzPVwieydnbHlwaGljb24tb2snIDogJHtmb3JtTmFtZX0uJHtjb250cm9sTmFtZX0uJHZhbGlkLCAnZ2x5cGhpY29uLXJlbW92ZScgOiAke2Zvcm1OYW1lfS4ke2NvbnRyb2xOYW1lfS4kaW52YWxpZCB9XCIgbmctaWY9XCIke2Zvcm1OYW1lfS4kc3VibWl0dGVkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPmApXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHNldCB0aGUgaGFzLWVycm9yIENTUyBpZiB0aGUgZm9ybSBoYXMgYmVlbiBzdWJtaXR0ZWRcclxuICAgICAgICAgICAgJChmb3JtR3JvdXApLmF0dHIoJ25nLWNsYXNzJywgbmdDbGFzc0F0dHJpYnV0ZShmb3JtTmFtZSwgY29udHJvbE5hbWUpKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAvLyBmb3IgZWFjaCBjaGVja2JveCwgd3JhcCBpbiBhIGNvbnRhaW5lciBkaXZcclxuICAgICAgICBlbGVtZW50LmZpbmQoJy5jaGVja2JveCcpLmVhY2goKGluZGV4LCBjaGVja2JveCkgPT4ge1xyXG4gICAgICAgICAgdmFyIGNvbnRyb2xzID0gJChjaGVja2JveCkuZmluZCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJylcclxuICAgICAgICAgIGlmIChjb250cm9scy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgLy8gc2V0IHRoZSBuYW1lLiBhbmQgbmctbW9kZWwgYXBwcm9wcmlhdGVseVxyXG4gICAgICAgICAgICB2YXIgY29udHJvbE5hbWUgPSBhZGROYW1lTmdNb2RlbFRvQ29udHJvbEFuZEdldENvbnRyb2xOYW1lKGNvbnRyb2xzWzBdKVxyXG4gICAgICAgICAgICAkKGNoZWNrYm94KS53cmFwKGA8ZGl2IG5nLWNsYXNzPVwiJHtuZ0NsYXNzQXR0cmlidXRlKGZvcm1OYW1lLCBjb250cm9sTmFtZSl9XCI+PC9kaXY+YClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgICRjb21waWxlKGVsZW1lbnQuY29udGVudHMoKSkoc2NvcGUpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KVxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
